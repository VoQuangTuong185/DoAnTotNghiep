using Optional;
using DoAnTotNghiep.DTO;
using WebAppAPI.DTO;
using WebAppAPI.Models.Entities;

namespace WebAppAPI.Services.Contracts
{
    public interface IAdminService
    {
        Task<IEnumerable<UserDTO>> GetUsers();
        Task<bool> ActiveOrInActiveUser(string loginName);
        Task<Option<bool, string>> EditUser(UserAdminDTO user);
        Task<bool> CheckExistedLoginName(string loginName);
        Task<Option<bool, string>> SetManagerPermisson(int userId);
        Task<int> AutoGeneratedProductID();
        Task<Option<bool, string>> CreateProduct(ProductDTOShow product);     
        Task<Option<bool, string>> UpdateProduct(ProductDTOUpdate product);                  
        Task<Option<bool, string>> InActiveProduct(int productId);
        Task<Option<bool, string>> InActiveBrand(int brandId);
        Task<IEnumerable<Product>> GetAllProduct(string type);
        Task<IEnumerable<Brand>> GetAllBrand(string type);
        Task<Brand> GetExistedBrand(int BrandId);
        Task<ProductDTOShow> GetExistedProduct(int ProductId);
        Task<Option<bool, string>> CreateBrand(CreateBrandDTO brand);
        Task<Option<bool, string>> UpdateBrand(BrandDTO brand);
        Task<IEnumerable<Product>> GetProductsByCategoryID(int categoryId);
        Task<IEnumerable<OrderDTO>> GetWaitingOrder();
        Task<IEnumerable<OrderDTO>> GetProcessingOrder();
        Task<IEnumerable<OrderDTO>> GetSuccessOrder();
        Task<IEnumerable<OrderDTO>> GetCancelOrder();
    }
}
