using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http.Headers;
using DoAnTotNghiep.DTO;
using WebAppAPI.DTO;
using WebAppAPI.Models.Entities;
using WebAppAPI.Services.Business;
using WebAppAPI.Services.Contracts;
using WebAppAPI.Services.Model;
using System.Drawing.Drawing2D;
using AdminService.DTO;
using DoAnTotNghiep.Models.Entities;

namespace WebAppAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AdminController : ControllerBase
    {
        public readonly IAdminService _IAdminService;
        private ILog _ILog;
        public AdminController(IAdminService IAdminService)
        {
            _IAdminService = IAdminService;
            //Get the Singleton Log Instance
            _ILog = Log.GetInstance;
        }
		[Authorize]
		[HttpGet("get-users")]
        public async Task<ApiResult> GetUsers()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetUsers();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
		[Authorize]
		[HttpGet("active-or-inactive-user")]
        public async Task<ApiResult> ActiveOrInActiveUser(string loginName)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.ActiveOrInActiveUser(loginName);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
		[Authorize]
		[HttpGet("check-existed-login-name")]
        public async Task<ApiResult> CheckExistedLoginName(string LoginName)
        {

            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.CheckExistedLoginName(LoginName);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
		[Authorize]
		[HttpPost("edit-user")]
        public async Task<ApiResult> EditUser(UserAdminDTO user)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.EditUser(user)).Match(res =>
                {
                    result.Message = "Thao tác thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
		[Authorize]
		[HttpGet("set-manager-permisson")]
        public async Task<ApiResult> SetManagerPermisson(int userId)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.SetManagerPermisson(userId)).Match(res =>
                {
                    result.Message = "Thao tác thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("auto-generated-product-id")]
        public async Task<ApiResult> AutoGeneratedProductID()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.AutoGeneratedProductID();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
		[HttpPost("create-product")]
        public async Task<ApiResult> CreateProduct(ProductDTOCreate product)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.CreateProduct(product)).Match(res =>
                {
                    result.Message = "Tạo sản phẩm " + product.ProductName + " thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }     
        [HttpPost("update-product")]
        public async Task<ApiResult> UpdateProduct(ProductDTOUpdate product)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.UpdateProduct(product)).Match(res =>
                {
                    result.Message = "Chỉnh sửa sản phẩm thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("inactive-product")]
        public async Task<ApiResult> InActiveProduct(int productId)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.InActiveProduct(productId)).Match(res =>
                {
                    result.Message = "Thao tác thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-existed-product")]
        public async Task<ApiResult> GetExistedProduct(int productId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetExistedProduct(productId);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-all-brand")]
        public async Task<ApiResult> GetAllBrand(string type)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetAllBrand(type);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-existed-brand")]
        public async Task<ApiResult> GetExistedBrand(int brandId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetExistedBrand(brandId);
                result.Message = "Lỗi khi lấy thông tin nhãn hàng!";
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }       
        [Authorize]
        [HttpPost("create-brand")]
        public async Task<ApiResult> CreateBrand(CreateBrandDTO brand)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.CreateBrand(brand)).Match(res =>
                {
                    result.Message = "Tạo nhãn hàng " + brand.BrandName + " thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("inactive-brand")]
        public async Task<ApiResult> InActiveBrand(int brandId)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.InActiveBrand(brandId)).Match(res =>
                {
                    result.Message = "Thao tác thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("update-brand")]
        public async Task<ApiResult> UpdateBrand(BrandDTO brand)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.UpdateBrand(brand)).Match(res =>
                {
                    result.Message = "Chỉnh sửa nhãn hàng " + brand.BrandName + " thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
		[HttpPost("upload-course-image"), DisableRequestSizeLimit]
        public async Task<IActionResult> Upload()
        {
            try
            {
                var formCollection = await Request.ReadFormAsync();
                var file = formCollection.Files.First();
                var folderName = Path.Combine("Resources", "Images");
                var pathToSave = Path.Combine(Directory.GetCurrentDirectory(), folderName);
                if (file.Length > 0)
                {
                    var fileName = ContentDispositionHeaderValue.Parse(file.ContentDisposition).FileName.Trim('"');
                    var fullPath = Path.Combine(pathToSave, fileName);
                    var dbPath = Path.Combine(folderName, fileName);
                    using (var stream = new FileStream(fullPath, FileMode.Create))
                    {
                        file.CopyTo(stream);
                    }
                    return Ok(new { dbPath });
                }
                else
                {
                    return BadRequest();
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex}");
            }
        }
        [Authorize]
        [HttpGet("get-products-by-category-id")]
        public async Task<ApiResult> GetProductsByCategoryID(int categoryId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetProductsByCategoryID(categoryId);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-waiting-order")]
        public async Task<ApiResult> GetWaitingOrder()
        {
            var result = new ApiResult();
            try
            {               
                result.Data = await _IAdminService.GetWaitingOrder();                
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;              
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-processing-order")]
        public async Task<ApiResult> GetProcessingOrder()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetProcessingOrder();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-success-order")]
        public async Task<ApiResult> GetSuccessOrder()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetSuccessOrder();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-cancel-order")]
        public async Task<ApiResult> GetCancelOrder()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetCancelOrder();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-all-category")]
        public async Task<ApiResult> GetAllCategory()
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetAllCategory();
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("create-category")]
        public async Task<ApiResult> CreateCategory(CategoryCreateDto category)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.CreateCategory(category)).Match(res =>
                {
                    result.Message = "Tạo danh mục " + category.CategoryName + " thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("update-category")]
        public async Task<ApiResult> UpdateCategory(Category category)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.UpdateCategory(category)).Match(res =>
                {
                    result.Message = "Chỉnh sửa danh mục " + category.CategoryName + " thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-existed-category")]
        public async Task<ApiResult> GetCategoryById(int categoryId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = _IAdminService.GetCategoryById(categoryId);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("inactive-category")]
        public async Task<ApiResult> InactiveCategory(int categoryId)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.InactiveCategory(categoryId)).Match(res =>
                {
                    result.Message = "Thao tác thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-all-product-by-oder-id")]
        public async Task<ApiResult> GetAllProductByOrderID(int orderId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetAllProductByOrderID(orderId);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("search-product")]
        public async Task<ApiResult> SearchProduct(string keyWord)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.SearchProduct(keyWord);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("cancel-order")]
        public async Task<ApiResult> CancelOrder(AdminOrderModel order)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.CancelOrder(order)).Match(res =>
                {
                    result.Message = "Huỷ đơn hàng thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("confirm-order")]
        public async Task<ApiResult> ConfirmOrder(AdminOrderModel order)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.ConfirmOrder(order)).Match(res =>
                {
                    result.Message = "Xác nhận đơn hàng thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("success-order")]
        public async Task<ApiResult> SuccessOrder(AdminOrderModel order)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.SuccessOrder(order)).Match(res =>
                {
                    result.Message = "Hoàn tất đơn hành thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpGet("get-feedback-by-productId")]
        public async Task<ApiResult> GetFeedbackByProductId(int productId)
        {
            var result = new ApiResult();
            try
            {
                result.Data = await _IAdminService.GetFeedbackByProductId(productId);
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
        [Authorize]
        [HttpPost("reply-feedback")]
        public async Task<ApiResult> ReplyFeedback(FeedbackShowDetail feedback)
        {
            var result = new ApiResult();
            try
            {
                (await _IAdminService.ReplyFeedback(feedback)).Match(res =>
                {
                    result.Message = "Phản hồi đánh giá thành công!";
                    result.Data = res;
                    result.IsSuccess = true;
                }, ex =>
                {
                    result.HttpStatusCode = 500;
                    result.Message = ex;
                    result.IsSuccess = false;
                });
            }
            catch (Exception ex)
            {
                result.IsSuccess = false;
                _ILog.LogException(ex.Message);
            }
            return result;
        }
    }
}
