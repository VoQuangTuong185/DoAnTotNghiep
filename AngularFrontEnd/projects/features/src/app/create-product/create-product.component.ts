import { HttpClient, HttpErrorResponse, HttpEventType } from '@angular/common/http';
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, NavigationStart, Route, Router } from '@angular/router';
import { ConfirmationService, MessageService } from 'primeng/api';
import { CoreConstants } from '../core/src/lib/core.constant';
import { WebsiteAPIService } from '../data/WebsiteAPI.service';
import { filter } from 'rxjs';
@Component({
  selector: 'app-create-product',
  templateUrl: './create-product.component.html',
  styleUrls: ['./create-product.component.scss']
})
export class CreatProductComponent {
  productForm: FormGroup;
  isEditing:boolean = false;
  existedCategoryId!: number;
  existedProductId!: number;
  ProductID!: number;
  response!: {dbPath: ''};
  brandData!: any[];
  brands: any[];
  brandSelected: any;
  constructor(
    private formBuilder : FormBuilder, 
    private confirmationService: ConfirmationService, 
    private router: Router, 
    private ActiveRoute : ActivatedRoute,
    private websiteAPIService : WebsiteAPIService,
    private messageService: MessageService,
    private http: HttpClient)
    {
      this.brands = [];
      this.ActiveRoute.paramMap.subscribe(()=> {
        this.existedCategoryId = Number(window.history.state.existedCategoryId);
      });
      this.productForm = this.createEmptyCourseForm();
      this.ActiveRoute.params.subscribe((params) =>{
        this.existedProductId = params['productId'];
      });
  }
  ngOnInit(): void{
    this.existedProductId ? this.getExistedProduct() : this.autoGeneratedProductID();  
    this.loadDataAllBrands(); 
    this.productForm.get('BrandName')?.valueChanges.subscribe(brand => {
      this.brandSelected = brand;
      this.getBrandIdOfBrand();
    });
  }
  createEmptyCourseForm(){
    return this.formBuilder.group({
      Id: [{value: '', disabled: true},Validators.required],
      ProductName: ['',Validators.required],
      Description: [''],
      BrandName: ['',Validators.required],
      BrandId: [{value: null, disabled: true},Validators.required],
      CategoryId: [{value: this.existedCategoryId, disabled:true}, Validators.required],
      SoldQuantity: [{value: null, disabled: true}],
      Quanity: [null,Validators.required],
      Discount: [null,Validators.required, Validators.max(100), Validators.min(1)],
      Price: [null],
      Image: [''],
      IsActive: [true],
    })
  }
  createExistedCourseForm(data : any){
    return this.formBuilder.group({
      Id: [{value: data.id, disabled:true},[Validators.required]],
      ProductName: [data.productName,[Validators.required]],
      Description: [data.description,[Validators.required]],
      BrandName: [data.brand.brandName,Validators.required],
      BrandId: [{value: data.brandId, disabled: true}, [Validators.required]],
      CategoryId: [{value: data.categoryId, disabled: true},[Validators.required]],
      SoldQuantity: [{value: data.soldQuantity, disabled:true},[Validators.required]],
      Quanity: [data.quanity, [Validators.required]],
      Discount: [data.discount,[Validators.required, Validators.max(100), Validators.min(1)]],
      Price: [data.price, [Validators.required]],
      Image: [data.image, [Validators.required]],
    })
  }
  getBrandIdOfBrand(): void {
    let tempData = this.brandData.find(({ brandName }) => brandName == this.brandSelected);
    this.productForm.controls['BrandId'].setValue(tempData.id);
  }
  saveForm(){
    if(this.response) this.productForm.controls['Image'].setValue(this.response.dbPath);
    if(this.existedProductId) {  
      this.websiteAPIService.updateProduct(this.productForm.getRawValue()).subscribe((res:any) =>{
        if(res.isSuccess){
          this.messageService.add({key: 'bc', severity:'success', summary: 'Successful', detail: 'Update Product Successfully!'});
        }
        else {
          this.messageService.add({key: 'bc', severity:'error', summary: 'Error', detail: 'Update Product Fail, try again!'});
        }
      });
    }
    else{   
      this.websiteAPIService.createProduct(this.productForm.getRawValue()).subscribe((res:any) =>{
        if(res.isSuccess){
          this.messageService.add({key: 'bc', severity:'success', summary: 'Successful', detail: 'Create Product Successfully!'});
        }
        else {
          this.messageService.add({key: 'bc', severity:'error', summary: 'Error', detail: 'Create Product Fail, try again!'});
        }
      });
    }
  }
  cancel(){
    this.confirmationService.confirm({
      message: 'Are you sure to cancel ?',
      header: 'Confirm',
      icon: 'pi pi-exclamation-triangle',
      accept: () => {        
        this.backToParent(); 
      }
    }); 
  }
  backToParent(){
    var categoryId = sessionStorage.getItem('currentCategoryId')
    this.router.navigate(['/admin/admin-category/admin-product/'+ categoryId]);
  }
  getExistedProduct(){
    this.websiteAPIService.getExistedProduct(this.existedProductId).subscribe((result : any) => {
      var data = result.data;
      this.productForm = this.createExistedCourseForm(data);
    });
  }
  autoGeneratedProductID(){
    this.websiteAPIService.autoGeneratedProductID().subscribe((res:any) =>{
      if(res.isSuccess){
        this.ProductID = res.data;
        this.productForm.controls['Id'].setValue(this.ProductID);
      }
      else {
        this.messageService.add({key: 'bc', severity:'error', summary: 'Error', detail: 'Auto generate product id fail!'});
      }
    });
  }  
  createImgPath = (serverPath: string) => {
    return CoreConstants.apiUrl() + `/${serverPath}`; 
  }
  uploadFinished = (event:any) => { 
    this.response = event; 
    this.productForm.controls['Image'].setValue(event.dbPath);
  }
  loadDataAllBrands(){
    this.websiteAPIService.getAllBrand('user').subscribe((res:any) => {
      this.brandData = res.data; 
      this.brandData.forEach(element => {
        this.brands.push(element.brandName);
      });
    });
  }
  changeBrandName(){
    this.productForm.get('BrandName')?.valueChanges.subscribe(brand => {
      this.brandSelected = brand;
      this.getBrandIdOfBrand();
    });
  }
}
